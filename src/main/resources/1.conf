akka {
  # 默认情况下，订阅这些消息的Actor是DefaultLogger ，它只是简单的将消息打印到标准输出
  loggers = ["akka.event.Logging$DefaultLogger"]

  # 将日志事件发布到eventStream之前，由LoggingAdapter使用的日志事件的过滤器。它可以基于日志源执行
  # 次细粒度过滤。默认的实现会在`loglevel`上进行过滤。
  # LoggingFilter的FQCN。 FQCN的类必须实现akka.event.LoggingFilter并具有带有
  # （akka.actor.ActorSystem.Settings，akka.event.EventStream）参数的公共构造函数。
  logging-filter = "akka.event.DefaultLoggingFilter"

  # 指定默认的日志调度器
  loggers-dispatcher = "akka.actor.default-dispatcher"

  # ActorSystem启动期间同步创建和注册的，并且由于它们是参与者，因此此超时用于限制等待时间
  logger-startup-timeout = 5s

  # 在启动后立即使用的日志级别；在此之前，请参见“ stdout-loglevel”
  # 选项：OFF，ERROR，WARNING，INFO，DEBUG
  loglevel = "INFO"

  # 在ActorSystem启动期间激活的最基本记录器的日志级别。
  # 此记录器将日志消息打印到stdout（System.out）。
  # ＃选项：OFF，ERROR，WARNING，INFO，DEBUG
  # stdout-loglevel只影响系统的启动和关闭，将它设置为OFF，那么确保在系统启动和关闭时没有任何日志。
  stdout-loglevel = "WARNING"

  # 启动actor系统时，将完整的配置记录在INFO级别。
  # 当您不确定使用什么配置时，这很有用。
  # on，表示启动时（即调用ActorSystem.create()方法）会打印配置信息
  log-config-on-start = off

  //死信的日志
  # 默认情况下，发送给死信（无效或退回的）的消息按info级别记录。
  # 可能的值：on：记录所有死信；off: 不记录任何死信;n：正整数，将记录的死信数目
  # 存在死信并不表明存在问题，但是也可能存在问题，因此默认情况下它们是记日志的。在几个消息之后，这个日志被关闭，避免洪泛日志。你可以完全禁止这个日志，或调整要记录多少死信
  log-dead-letters = 10
  #在角色系统关闭时，可以关闭对死信的记录。仅在通过“ log-dead-letters”设置启用后才进行记录
  log-dead-letters-during-shutdown = on

  actor {
    debug {
      # Actor.loggable（）的启用功能，该功能用于在DEBUG级别记录任何接收到的消息
      receive = off
      # 启用所有AutoReceiveMessage的调试日志记录（Kill，PoisonPill等）
      autoreceive = off
      # Actor所有生命周期变化（重启、死亡等）的非常详细的日志
      lifecycle = off
      # 继承自LoggingFSM的FSM Actor的所有事件、迁移、定时器的详细日志
      fsm = off
      # 监视ActorSystem.eventStream的订阅（订阅和取消订阅）：
      event-stream = off
      # 将未处理的消息记录为DEBUG
      unhandled = off
      # enable WARN logging of misconfigured routers
      router-misconfiguration = off
    }
  }

  remote {
    # DEBUG日志级别看到所有通过远程发送的消息：(这是作为传输层发送的日志，不是Actor)
    log-sent-messages = on
    # DEBUG日志级别看到所有通过远程接收的消息：(这是作为传输层接收的日志，不是任意的Actor)
    log-received-messages = on
    # INFO日志级别看到消息负载大于指定字节限制的消息：
    log-frame-size-exceeding = 1000b
  }

}